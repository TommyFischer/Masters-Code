using PlotlyJS,
    SparseArrays,
    StaticArrays,
    LinearAlgebra,
    DifferentialEquations,
    FFTW,
    LaTeXStrings,
    Plots,
    WAV,
    JLD2,
    Makie, 
    GLMakie

FFTW.forget_wisdom # Still not 100% sure what this does
FFTW.set_num_threads(6) # Need to test to find optimal number

begin # Functions for setting up and running simulations

    function MakeArrays(Ls,Lz,M,Mz) # Makes position space and k-space arrays

        global λ_x = 1 
        global λ_y = ω_y/ω_x 
        global λ_z = ω_z/ω_x

        global x = LinRange(-(Ls-1)/2,(Ls-1)/2,M)
        global y = LinRange(-(Ls-1)/2,(Ls-1)/2,M)'
        global z = reshape(LinRange(-(Lz-1)/2,(Lz-1)/2,Mz),(1,1,Mz))

        global dx = x[2] - x[1]
        global dy = y[2] - y[1]
        global dz = z[2] - z[1]

        global kx = fftfreq(M,2π/dx)
        global ky = fftfreq(M,2π/dy)'
        global kz = reshape(fftfreq(Mz,2π/dz),(1,1,Mz))

        global k2 =  kx.^2 .+ ky.^2 .+ kz.^2 # 3D wave vector
        global dr = dx*dy*dz

    end;

    function kfunc!(dψ,ψ) # Kinetic Energy term (no rotating frame)
        dψ .= 0.5*(ifft(k2.*fft(ψ)))
        return nothing
    end

    function nlin!(dψ,ψ,t) # Non-linear terms with rotation
        a = sin(Ωy*t)*cos(Ωx*t)
        b = sin(Ωx*t)
        c = cos(Ωy*t)*cos(Ωx*t)
        dψ .= ifft((0.5*kx.^2 .+ Ωz*kx.*(b*z .+ c*y)).*fft(ψ,1),1) .+ ifft((0.5*ky.^2 .+ Ωz*ky.*(a*z .- c*x)).*fft(ψ,2),2) .+ ifft((0.5*kz.^2 .- Ωz*kz.*(a*y .+ b*x)).*fft(ψ,3),3)
        return nothing
    end

    function kobayashi!(dψ,ψ,t)
        a = Ωx/Ωz*cos(Ωy*t) + sin(Ωy*t)*cos(Ωx*t)
        b = Ωy/Ωz - sin(Ωx*t)
        c = Ωx/Ωz*sin(Ωy*t) + cos(Ωy*t)*cos(Ωx*t)
        dψ .= ifft((0.5*kx.^2 .+ Ωz*kx.*(b*z .+ c*y)).*fft(ψ,1),1) .+ ifft((0.5*ky.^2 .+ Ωz*ky.*(a*z .- c*x)).*fft(ψ,2),2) .+ ifft((0.5*kz.^2 .- Ωz*kz.*(a*y .+ b*x)).*fft(ψ,3),3)
        return nothing
    end

    function GPE!(dψ,ψ,var,t) # GPE Equation 
        kfunc!(dψ,ψ)
        dψ .= @. -(γ + im)*(dψ + (V_μ + G*abs2(ψ))*ψ)
    end

    function RotGPE!(dψ,ψ,var,t) # GPE Equation with 3-axis rotation
        kobayashi!(dψ,ψ,t)
        dψ .= @. -(γ + im)*(dψ + (V_0 + G*abs2(ψ) .- μ)*ψ)
    end

    V(x,y,z) = 0.5*(λ_x^2*x.^2 .+ λ_y^2*y.^2 .+ λ_z^2*z.^2)
    R(ω_i) = sqrt(2*ħ*ω_x*μ/(m*ω_i^2))/l

end

begin # Functions for making plots
    
    function gradsquared(ψ) # Gradient Squared of ψ
        ϕ = fft(ψ)
        out = complex(zeros(M,M,Mz))
    
        for j in (kx,ky',reshape(kz,(1,1,Mz)))
            out .+= abs2.(ifft(im*j.*ϕ))/2
        end
        return real.(out)
    end;     

    function E_Kin(sol) # Kinetic energy over time
        n = length(sol[1,1,1,:])
        E_kin = ones(n)
    
        for i in 1:n
            E_kin[i] = sum(gradsquared(sol[:,:,:,i]))
        end
        return E_kin
    end

    function E_Pot(sol) # Potential Energy over time, V needs to be the same
        n = length(sol[1,1,1,:])
        E_Pot = ones(n)
    
        for i in 1:n
            E_Pot[i] = sum(V_0.*abs2.(sol[:,:,:,i]))
        end
        return E_Pot
    end

    function E_Int(sol) # Interaction Energy over time
        n = length(sol[1,1,1,:])
        E_Int = ones(n)
    
        for i in 1:n
            E_Int[i] = G*sum((abs2.(sol[:,:,:,i])).^2)
        end
        return E_Int
    end

    function Normcheck(solut,l=(0,2)) # Checks Normalisation
        n = length(solut[1,1,1,:])
        norm = ones(n)
        for i in 1:n
            norm[i] = sum(abs2.(solut[:,:,:,i]))*dx*dy*dz
        end
        Plots.plot(norm,ylims = l)
    end

    function Volume1(res,t,isomax=false,opacity=0.5,surface_count=10) # 3D volume plot of solution at t
        vals = res[:,:,:,t];
        X, Y, Z = mgrid(x,y,z);
    
        p = PlotlyJS.volume(
            x=X[:],
            y=Y[:],
            z=Z[:],
            value=vals[:],
            opacity=opacity,
            isomin=0,
            isomax=isomax,
            surface_count=surface_count,
            caps=attr(x_show=false, y_show=false,z_show=false),
            colorscale=:YlOrRd,
            reversescale = true
            )
    
        data = [p];
    
        layout = Layout(title = "t = (sol.t[t])",
                width = 500,
                height = 500, 
                scene_camera=attr(eye=attr(x=0, y=2, z=1)))
    
        pl = PlotlyJS.plot(data,layout)
    
    end

    function MakieVolume(sol,t,alpha=0.12,iso=[0.15],axis=true,col=:oxy)
        if typeof(sol[1]) == Array{ComplexF64, 3} # Checking if input solution is already squared or not
            density_Scaled = abs2.(sol[:,:,:,t])
        else
            density_Scaled = copy(sol[:,:,:,t])
        end
    
        for i in 1:length(sol[1,1,1,:]) # Scaling to 1 to make isovalues easier
            density_Scaled /= maximum(density_Scaled)
        end
    
        Makie.contour(density_Scaled, # Making the plot
        alpha=alpha,
        levels=iso,
        colormap=col,
        show_axis=axis)
    end

    function MakieVolume!(sol,t,alpha=0.12,iso=[0.15],axis=true,col=:oxy)
        if typeof(sol[1]) == Array{ComplexF64, 3} # Checking if input solution is already squared or not
            density_Scaled = abs2.(sol[:,:,:,t])
        else
            density_Scaled = copy(sol[:,:,:,t])
        end
    
        for i in 1:length(sol[1,1,1,:]) # Scaling to 1 to make isovalues easier
            density_Scaled /= maximum(density_Scaled)
        end
    
        Makie.contour!(density_Scaled, # Making the plot
        alpha=alpha,
        levels=iso,
        colormap=col,
        show_axis=axis)
    end

    function MakieGif(sol,title,framerate, alph=0.12, iso=[0.15], axis=true, col=:oxy, )
        if typeof(sol[1]) == Array{ComplexF64, 3} # Checking if input solution is already squared or not
            density_Scaled = abs2.(sol)
        else
            density_Scaled = copy(sol)
        end
    
        for i in 1:length(density_Scaled[1,1,1,:]) # Scaling to 1 to make isovalues easier
            density_Scaled[:,:,:,i] /= maximum(density_Scaled[:,:,:,i])
        end
    
        saveat = joinpath("Gifs",title)
        tindex = Observable(1)
        scene = Makie.contour(Makie.lift(i -> density_Scaled[i],tindex),
        alpha=alph,
        levels=iso,
        colormap=col,
        show_axis=axis)
    
        Makie.record(scene,saveat,1:length(sol.t),framerate = framerate) do i 
            tindex[] = i
        end
    end
end



############################################ Leshgo ##########################################



begin # Setup
    ω_x = 100*2π
    ω_y = sqrt(1.05)*ω_x
    ω_z = sqrt(.95)*ω_x

    ħ = 1.05457182e-34
    m = 87*1.66e-27 # Rubidium-87 mass (need to check this is correct)
    a_s = 5.8e-9 # Rubidium-87 scattering length (also check this)

    N = 3e5 # Number of atoms
    l = sqrt(ħ/(m*ω_x)) # Characteristic lengthscale
    g = 4π*ħ^2*a_s/m # Actual g value
    G = g*(N*m/(ħ^2*l)) # 'Dimensionless' g value
    
    μ = 0.5*(m*(15*N*ω_z*a_s)^2/(ħ*ω_x))^0.2
end 

begin
    L = 2*(1.5*max(R(ω_x),R(ω_y),R(ω_z)))
    Lz = 2*(1.5*max(R(ω_x),R(ω_y),R(ω_z)))

    M = 110
    Mz = 110

    Ωx = 0.0
    Ωy = 0.0
    Ωz = 0.7

    MakeArrays(L,Lz,M,Mz)

    V_0 = V(x,y,z);
    V_μ = V_0 .- μ
end;

ξ = 1/sqrt(2*μ)
dx

M,M,Mz

# Random initial condition
ψ_rand = randn(M,M,Mz) + im*rand(M,M,Mz);

# Thomas-Fermi initial condition?
ψ_tf = complex(sqrt.(ħ*ω_x*l^3/g*[max(0,μ - 0.5*(λ_x^2*i^2 + λ_y^2*j^2 + λ_z^2*k^2)) for i in x, j in x, k in reshape(z,Mz)]));

# Normalisation to 1
ψ_tf /= sqrt(sum(abs2.(ψ_tf))*dr);

# Thermal noise 
#ψ_tf += 0.001(randn(M,M,Mz) + im*randn(M,M,Mz));

# Last check that it looks all good
Plots.heatmap(abs2.(ψ_tf[:,:,55]),aspectratio=1)



############################################ Finding GS ##########################################



begin 
    γ = 1
    tspan = (0.0,10.0);
    var = [μ,G]; 

    prob = ODEProblem(RotGPE!,ψ_tf,tspan)
    @time sol_GS = solve(prob,alg=Tsit5(),saveat=0.02)
end;

#@save "Desktop/Data/sol_GS.jld2" sol_GS
#@load "Desktop/Data/sol_GS.jld2" sol_GS
#beep()

length(sol_GS.t)

res = abs2.(sol_GS);
Plots.heatmap(res[:,:,55,500],aspectratio=1)

Volume1(res,200,false,0.5,3)

Normcheck(sol_GS)

#Plots.heatmap(abs2.(sol_GS[:,:,55,90]))

MakieVolume(res,80,0.06,[0.02])

MakieVolume!(res,100)

MakieGif(sol_GS,"BigLattice.gif",25)


using VortexDistributions

VORTICES = zeros(M,M,Mz);
for Z in 1:Mz
    Vtest = sol_GS[:,:,Z,end];

    p = Plots.heatmap(x,y',abs2.(Vtest))

    psi = Torus(Vtest,x,y')
    vfound = findvortices(psi)

    vortices = []
    Vres = abs2.(Vtest);
    threshhold = 0.000002
    radius = 

    for i in vfound
        xv = searchsortedfirst(x,i.xv)
        yv = searchsortedfirst(y',i.yv)
        if Vres[xv,yv] > threshhold
            push!(vortices,(i.xv,i.yv,i.qv))
        end
    end

    size(vortices)

    for i in vortices    
        Plots.scatter!(p,[i[2]],[i[1]],legend=false)
    end

    p

    vline!([0.05,-0.6])

    VortexMap = zeros(M,M)

    gridTuples = []
    for i in [-2,-1,0,1,2], j in [-2,-1,0,1,2]
        if (i^2 + j^2) != 8
            push!(gridTuples,(i,j))
        end
    end

    size(gridTuples)


    for i in vortices
        xv = searchsortedfirst(x,i[1])
        yv = searchsortedfirst(y',i[2])

        for j in gridTuples
            VortexMap[xv + j[1],yv + j[2]] = 1
        end
    end
        
    Plots.heatmap(VortexMap.*abs2.(Vtest))
    
    VORTICES[:,:,Z] .= abs2.(VortexMap.*Vtest)
    VORTICES[:,:,Z] ./= maximum(VORTICES[:,:,Z])
end

@save "sol_GS" sol_GS
@load "sol_GS" sol_GS

typeof(sol_GS)

res = abs2.(sol_GS)
angle1 = angle.(sol_GS[:,:,:,100])

Plots.heatmap(res[:,:,55,100],color=:thermal)
Plots.plot(res[:,55,55,390])
Plots.heatmap(angle1[:,:,55])

Makie.volume(VORTICES,algorithm=:iso,isovalie=0.5)


(1715/(4π*3e5) * sqrt(ħ)/(a_s*sqrt(m)))^2








